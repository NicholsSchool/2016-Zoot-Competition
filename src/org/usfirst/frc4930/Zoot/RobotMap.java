// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4930.Zoot;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.RobotDrive;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 * 
 * @author Ashi and Quinn
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
    public static CANTalon driveTrainLeftMaster;
    public static CANTalon driveTrainRightMaster;
    public static CANTalon driveTrainLeftSlave1;
    public static CANTalon driveTrainLeftSlave2;
    public static CANTalon driveTrainRightSlave1;
    public static CANTalon driveTrainRightSlave2;
    public static RobotDrive driveTrainMasterMotors;
    
    public static CANTalon intakeMotorsMaster;
    public static CANTalon intakeMotorsSlave;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftMaster = new CANTalon(0);
        LiveWindow.addActuator("DriveTrain", "LeftMaster", driveTrainLeftMaster);
        
        driveTrainRightMaster = new CANTalon(1);
        LiveWindow.addActuator("DriveTrain", "RightMaster", driveTrainRightMaster);
        
        driveTrainLeftSlave1 = new CANTalon(2);
        LiveWindow.addActuator("DriveTrain","LeftSlave1", driveTrainLeftSlave1);
        
        driveTrainLeftSlave2 = new CANTalon(3);
        LiveWindow.addActuator("DriveTrain","LeftSlave2", driveTrainLeftSlave2);
        
        driveTrainRightSlave1 = new CANTalon(4);
        LiveWindow.addActuator("DriveTrain","RightSlave1", driveTrainRightSlave1);
        
        driveTrainRightSlave2 = new CANTalon(5);
        LiveWindow.addActuator("DriveTrain","RightSlave2", driveTrainRightSlave2);
        
        driveTrainMasterMotors = new RobotDrive(driveTrainLeftMaster, driveTrainRightMaster);
        
        driveTrainMasterMotors.setSafetyEnabled(true);
        driveTrainMasterMotors.setExpiration(0.1);
        driveTrainMasterMotors.setSensitivity(0.5);
        driveTrainMasterMotors.setMaxOutput(1.0);


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftSlave1.changeControlMode(TalonControlMode.Follower);
        driveTrainLeftSlave1.set(driveTrainLeftMaster.getDeviceID());
        
        driveTrainLeftSlave2.changeControlMode(TalonControlMode.Follower);
        driveTrainLeftSlave2.set(driveTrainLeftMaster.getDeviceID());
        
        driveTrainRightSlave1.changeControlMode(TalonControlMode.Follower);
        driveTrainRightSlave1.set(driveTrainRightMaster.getDeviceID());
        
        driveTrainRightSlave2.changeControlMode(TalonControlMode.Follower);
        driveTrainRightSlave2.set(driveTrainRightMaster.getDeviceID());
        
        intakeMotorsSlave.changeControlMode(TalonControlMode.Follower);
        intakeMotorsSlave.set(intakeMotorsMaster.getDeviceID());
        
    }
}
