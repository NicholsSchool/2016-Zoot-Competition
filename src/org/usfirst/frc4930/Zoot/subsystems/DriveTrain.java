// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4930.Zoot.subsystems;

import org.usfirst.frc4930.Zoot.RobotMap;
import org.usfirst.frc4930.Zoot.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 * @author Ashi and Quinn
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public CANTalon leftMaster = RobotMap.driveTrainLeftMaster;
    public CANTalon rightMaster = RobotMap.driveTrainRightMaster;
    public CANTalon leftSlave1 = RobotMap.driveTrainLeftSlave1;
    public CANTalon leftSlave2 = RobotMap.driveTrainLeftSlave2;
    public CANTalon rightSlave1 = RobotMap.driveTrainRightSlave1;
    public CANTalon rightSlave2 = RobotMap.driveTrainRightSlave2;
    public static RobotDrive masterMotors = RobotMap.driveTrainMasterMotors;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDrive());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

	public void takeJoystickInputs(Joystick joystick0, Joystick joystick1) {

		masterMotors.tankDrive(joystick0.getY() , joystick1.getY());
		
		
	}
	public void runMotors(double joystick0 , double joystick1){
		masterMotors.tankDrive( joystick0 , joystick1);
	}
	public void stop() {
		// TODO Auto-generated method stub
		masterMotors.tankDrive(0, 0);
		
	}
}

